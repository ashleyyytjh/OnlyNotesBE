stages:
  - test
  - build
  - scan
  - push
  - staging
  - notification
  - production

variables:
  SERVICE: "account"
  DS_EXCLUDED_ANALYZERS: "gemnasium-python,gemnasium-maven"
  ECR_REGISTRY: "211125709264.dkr.ecr.ap-southeast-1.amazonaws.com/${SERVICE}"
  IMAGE: "$CI_REGISTRY_IMAGE:$SERVICE-$CI_COMMIT_REF_SLUG"
  SERVICE_NAME: account-ecs-staging
  TASK_DEFINITION_NAME: account-ecs-task-staging
  SERVICE_NAME_PROD: account-ecs-production
  TASK_DEFINITION_NAME_PROD: account-ecs-task-production

include:
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
  - template: Jobs/Container-Scanning.gitlab-ci.yml
  - template: Jobs/SAST.gitlab-ci.yml

account-unit-tests:
  stage: test
  image: node:20-slim
  before_script:
    - cd ./apps/account
    - npm install
  script:
    - npm run test:unit
  allow_failure: true
  artifacts:
    when: always
    paths:
      - coverage/

# Build Docker Image
account-build:
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  stage: build
  script:
    - apk add --no-cache git
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - cd ./apps/${SERVICE}
    - git fetch --tags
    - LATEST_TAG=$(git tag --list "${SERVICE}-v[0-9]*.[0-9]*.[0-9]*" | sort -V | tail -n 1)
    - SEMVER=$(echo "$LATEST_TAG" | sed "s/${SERVICE}-//")
    - VERSION="${SEMVER}-${CI_COMMIT_SHORT_SHA}"
    - echo "VERSION=${VERSION}" >> build.env

    - docker build -t $IMAGE .
    - docker push $IMAGE
  artifacts:
    reports:
      dotenv: ./apps/${SERVICE}/build.env

container_scanning:
  stage: scan
  variables:
    CS_IMAGE: "$IMAGE"
    CS_DOCKERFILE_PATH: "./apps/account/Dockerfile"
  dependencies:
    - account-build

account-push:
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  stage: push
  before_script:
    - apk add --no-cache python3 py3-pip
    - pip install awscli
    - aws --version
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login $CI_REGISTRY -u $CI_REGISTRY_USER --password-stdin
    - docker pull $IMAGE
    - aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 211125709264.dkr.ecr.ap-southeast-1.amazonaws.com
    - docker tag $IMAGE ${ECR_REGISTRY}:${VERSION}
    - docker tag $IMAGE ${ECR_REGISTRY}:latest
    - docker push ${ECR_REGISTRY}:${VERSION}
    - docker push ${ECR_REGISTRY}:latest
  dependencies:
    - account-build


ecs-staging:
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  stage: staging
  before_script:
    - apk add --no-cache python3 jq py3-pip
    - pip install awscli
    - aws --version
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    - $(aws ecr get-login --no-include-email --region "${AWS_DEFAULT_REGION}")
  script:
    - echo ${ECR_REGISTRY}:${VERSION}
    - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "$TASK_DEFINITION_NAME" --region "${AWS_DEFAULT_REGION}")
    - echo $TASK_DEFINITION
    - NEW_CONTAINER_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE_ECR "${ECR_REGISTRY}:${VERSION}" '.taskDefinition.containerDefinitions[0].image = $IMAGE_ECR | .taskDefinition.containerDefinitions[0]')
    - CPU=$(echo $TASK_DEFINITION | jq -r '.taskDefinition.cpu')
    - MEMORY=$(echo $TASK_DEFINITION | jq -r '.taskDefinition.memory')
    - REQUIRES_COMPATIBILITIES=$(echo $TASK_DEFINITION | jq -r '.taskDefinition.requiresCompatibilities')
    - TASK_ROLE_ARN=$(echo $TASK_DEFINITION | jq -r '.taskDefinition.taskRoleArn')
    - EXECUTION_ROLE_ARN=$(echo $TASK_DEFINITION | jq -r '.taskDefinition.executionRoleArn')
    - NETWORK_MODE=$(echo $TASK_DEFINITION | jq -r '.taskDefinition.networkMode')
    - RUNTIME_PLATFORM=$(echo $TASK_DEFINITION | jq -r '.taskDefinition.runtimePlatform')
    - echo "Registering new container definition..."
    - aws ecs register-task-definition --region "${AWS_DEFAULT_REGION}" --family "${TASK_DEFINITION_NAME}" --container-definitions "${NEW_CONTAINER_DEFINITION}" --cpu "${CPU}" --memory "${MEMORY}" --requires-compatibilities "${REQUIRES_COMPATIBILITIES}" --task-role-arn "${TASK_ROLE_ARN}" --execution-role-arn "${EXECUTION_ROLE_ARN}" --network-mode "${NETWORK_MODE}" --runtime-platform "${RUNTIME_PLATFORM}"
    - echo "Updating the service..."
    - aws ecs update-service --region "${AWS_DEFAULT_REGION}" --cluster "${STAGING_CLUSTER_NAME}" --service "${SERVICE_NAME}"  --task-definition "${TASK_DEFINITION_NAME}"
    - echo "Finish updating Task:${TASK_DEFINITION_NAME} Service:${SERVICE_NAME} Cluster:${STAGING_CLUSTER_NAME} with image:${ECR_REGISTRY}:${VERSION}"
  only:
    - main
  dependencies:
    - account-build

success:
  stage: notification
  script:
    - echo "Pipeline passed, no notification sent."
  when: on_success
  allow_failure: true  

failure_notification:
  stage: notification
  script:
    - wget https://raw.githubusercontent.com/DiscordHooks/gitlab-ci-discord-webhook/master/send.sh
    - chmod +x send.sh
    - ./send.sh failure $ACCOUNT_WEBHOOK_URL
  when: on_failure
  allow_failure: true 


ecs-production:
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  stage: production
  before_script:
    - apk add --no-cache python3 jq py3-pip
    - pip install awscli
    - aws --version
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_DEFAULT_REGION
    - $(aws ecr get-login --no-include-email --region "${AWS_DEFAULT_REGION}")
  script:
    - echo ${ECR_REGISTRY}:${VERSION}
    - TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition "$TASK_DEFINITION_NAME_PROD" --region "${AWS_DEFAULT_REGION}")
    - echo $TASK_DEFINITION
    - NEW_CONTAINER_DEFINITION=$(echo $TASK_DEFINITION | jq --arg IMAGE_ECR "${ECR_REGISTRY}:${VERSION}" '.taskDefinition.containerDefinitions[0].image = $IMAGE_ECR | .taskDefinition.containerDefinitions[0]')
    - CPU=$(echo $TASK_DEFINITION | jq -r '.taskDefinition.cpu')
    - MEMORY=$(echo $TASK_DEFINITION | jq -r '.taskDefinition.memory')
    - REQUIRES_COMPATIBILITIES=$(echo $TASK_DEFINITION | jq -r '.taskDefinition.requiresCompatibilities')
    - TASK_ROLE_ARN=$(echo $TASK_DEFINITION | jq -r '.taskDefinition.taskRoleArn')
    - EXECUTION_ROLE_ARN=$(echo $TASK_DEFINITION | jq -r '.taskDefinition.executionRoleArn')
    - NETWORK_MODE=$(echo $TASK_DEFINITION | jq -r '.taskDefinition.networkMode')
    - RUNTIME_PLATFORM=$(echo $TASK_DEFINITION | jq -r '.taskDefinition.runtimePlatform')
    - echo "Registering new container definition..."
    - aws ecs register-task-definition --region "${AWS_DEFAULT_REGION}" --family "${TASK_DEFINITION_NAME_PROD}" --container-definitions "${NEW_CONTAINER_DEFINITION}" --cpu "${CPU}" --memory "${MEMORY}" --requires-compatibilities "${REQUIRES_COMPATIBILITIES}" --task-role-arn "${TASK_ROLE_ARN}" --execution-role-arn "${EXECUTION_ROLE_ARN}" --network-mode "${NETWORK_MODE}" --runtime-platform "${RUNTIME_PLATFORM}"
    - echo "Updating the service..."
    - aws ecs update-service --region "${AWS_DEFAULT_REGION}" --cluster "${PRODUCTION_CLUSTER_NAME}" --service "${SERVICE_NAME_PROD}"  --task-definition "${TASK_DEFINITION_NAME_PROD}"
    - echo "Finish updating Task:${TASK_DEFINITION_NAME_PROD} Service:${SERVICE_NAME_PROD} Cluster:${PRODUCTION_CLUSTER_NAME} with image:${ECR_REGISTRY}:${VERSION}"
  dependencies:
    - account-build
  when: manual
  allow_failure: true
  needs: []