stages:
  - test
  - build
  - scan
  - push

variables:
  SERVICE: "orders"
  DS_EXCLUDED_ANALYZERS: "gemnasium-maven,gemnasium-python"
  ECR_REGISTRY: "211125709264.dkr.ecr.ap-southeast-1.amazonaws.com/${SERVICE}"

include:
  - template: Jobs/Dependency-Scanning.gitlab-ci.yml
  - template: Jobs/Container-Scanning.gitlab-ci.yml
  - template: Jobs/SAST.gitlab-ci.yml


# Jest tests
orders-unit-tests:
  stage: test
  image: node:20-slim
  before_script:
    - cd ./apps/orders
    - npm install
  script:
    - npm run test
  artifacts:
    when: always
    paths:
      - coverage/
  variables:
    STRIPE_SECRET_KEY: $STRIPE_SECRET_KEY

# Build Docker Image
orders-build:
  image: $CI_REGISTRY/group/project/docker:20.10.16
  services:
    - name: $CI_REGISTRY/group/project/docker:20.10.16-dind
      alias: docker
  stage: build
  script:
    - LATEST_TAG=$(git tag --list "${SERVICE}-v[0-9]*.[0-9]*.[0-9]*" | sort -V | tail -n 1)
    - SEMVER=$(echo "$LATEST_TAG" | sed "s/${SERVICE}-//")
    - VERSION="${SEMVER}-${CI_COMMIT_SHORT_SHA}"
    - echo VERSION >> build.env
    
    - docker build -t ${ECR_REGISTRY}:${VERSION}
    - docker tag ${ECR_REGISTRY}:${VERSION} ${ECR_REGISTRY}:latest
  artifacts:
    reports:
      dotenv: build.env
  # only:
  #   - tags

container_scanning:
  stage: scan
  script:
    - export CS_IMAGE="${ECR_RESGISTRY}:${VERSION}"
    - container-scanning
  dependencies:
    - orders-build

orders-push:
  stage: push
  script:
    - docker push ${ECR_REGISTRY}:${VERSION}
    - docker push ${ECR_REGISTRY}:latest